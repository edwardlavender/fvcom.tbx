% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_mesh.R
\name{build_mesh}
\alias{build_mesh}
\title{Build unstructured meshes}
\usage{
build_mesh(
  nodexy,
  trinodes,
  mesh_type = "element",
  proj4string = sp::CRS(as.character("+init=epsg:4326")),
  cl = NULL,
  pass2varlist = NULL
)
}
\arguments{
\item{nodexy}{A dataframe containing node IDs and coordinates. The dataframe should have three columns: 'node_id', 'x' and 'y'. See \code{\link[fvcom.tbx]{dat_nodexy}} for an example.}

\item{trinodes}{A dataframe containing element IDs and the surrounding nodes (i.e. which nodes are linked to which other nodes). The dataframe should have four columns: 'element_id', 'node1', 'node2' and 'node3'. See \code{\link[fvcom.tbx]{dat_trinodes}} for an example}

\item{mesh_type}{A character specifying the mesh type to be built. There are two options: \code{"node"} or \code{"element"}. \code{mesh_type = "node"} builds a mesh based on nodes (i.e. around elements). This is useful for plotting conditions resolved at elements. \code{mesh_type = "element"} builds a mesh around nodes based on elements. This is useful for plotting conditions resolved at nodes.}

\item{proj4string}{A projection string of class \code{\link[sp]{CRS-class}}. The World Geodetic System 84 (WGS84), i.e. \code{proj4string = sp::CRS(as.character("+init=epsg:4326"))}, is the default.}

\item{cl}{A cluster object created by \code{\link[parallel]{makeCluster}}. This is required if you want to run the algorithm in parallel, which can improve computation time (especially for large meshes). If supplied, the connection to the cluster is stopped within the function.}

\item{pass2varlist}{A list containing the names of exported objects. This may be required if \code{cl} is supplied. This is passed to the \code{varlist} argument of \code{\link[parallel]{clusterExport}}. Exported objects must be located in the global environment.}
}
\value{
An SpatialPolygonsDataFrame (see \code{\link[sp]{SpatialPolygonsDataFrame-class}}). Each polygon has an ID corresponding to the ID of the node or element which is surrounds, as supplied by the nodexy or trinodes dataframe respectively.
}
\description{
This function is used to build an unstructured mesh (around nodes or elements) from node coordinates and connections as a SpatialPolygonsDataFrame. This function was designed with the WeStCOMS unstructured mesh in mind.
}
\examples{

library(raster)

# 1) Build a mesh around elements (based on nodes) on a single processor
# You will receive a warning when you run this:
# ...'In sp::Polygon(coords, hole) : less than 4 coordinates in polygon'.
# This can be safely ignored. This is because each polygon is a prism;
# ... i.e., only comprised of three coordinates.
mesh_around_elements <- build_mesh(nodexy = dat_nodexy,
                                   trinodes = dat_trinodes,
                                   mesh_type = "node",
                                   cl = NULL,
                                   pass2varlist = NULL)

# 2) Build a mesh around nodes (based on elements) on a single processor
mesh_around_nodes <- build_mesh(nodexy = dat_nodexy,
                                trinodes = dat_trinodes,
                                mesh_type = "element",
                                cl = NULL,
                                pass2varlist = NULL)

# 3) Build a mesh around elements (based on nodes) using parallel processing
# Define cluster object:
cl <- parallel::makeCluster(2L)
# Run the build_mesh algorithm in parallel by supplying a cluster:
mesh_around_elements <- build_mesh(nodexy = dat_nodexy,
                                   trinodes = dat_trinodes,
                                   mesh_type = "node",
                                   cl = cl,
                                   pass2varlist = c("dat_nodexy", "dat_trinodes"))
# Note that the connection with the cluster is closed within the function.

}
\seealso{
\code{\link[sp]{SpatialPolygonsDataFrame-class}} for the output class;
\code{\link[fvcom.tbx]{dat_nodexy}} for an example nodexy dataframe;
\code{\link[fvcom.tbx]{dat_trinodes}} for an example trinodes dataframe;
\code{\link[parallel]{makeCluster}} and \code{\link[parallel]{clusterExport}} for more information on parallelisation.
}
\author{
Edward Lavender
}
